generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Product model
model Product {
  id              String       @id @default(cuid())
  productName     String
  productType     String
  originalPrice   Float
  discountedPrice Float
  addedAt         DateTime     @default(now())
  imageUrl        String
  cartItems       CartItem[]   // Relation to CartItem
  orderItems      OrderItem[]  // Relation to OrderItem
  wishlistItems   WishlistItem[] // Relation to WishlistItem
  brand           String       // Add brand field
  category        String       // Add category field
  stock           Int
  reviews         Review[]     // Relation to Review
  sales           Int
}

model Review {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  rating      Int      // Rating given by the user, e.g., 1 to 5 stars
  comment     String?  // Optional comment
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Account model
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// User model
model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  carts         Cart[]    // Relation to Cart
  wallet        Wallet?   // One-to-one relation with Wallet
  orders        Order[]   // Relation to Order
  wishlists     Wishlist[] // One-to-many relation with Wishlist
  addresses     Address[] // One-to-many relation with Address
  reviews       Review[]  // Relation to Review

  @@map("users")
}

// VerificationToken model
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Cart model
model Cart {
  id         String     @id @default(cuid())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  cartItems  CartItem[] // One-to-many relation with CartItem
  status     CartStatus @default(ACTIVE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

// CartItem model
model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Wallet model
model Wallet {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String   @unique  // Ensures one-to-one relationship
  balance          Float    @default(0.0)
  cashbackAmount   Float    @default(0.0)  // The amount of cashback the user has
  cashbackExpiry   DateTime?                // Expiry date for the cashback
  cashbackStatus   String   @default("inactive") // Tracks if cashback is "active" or "expired"
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model WalletTransaction {
  id               String          @id @default(uuid())  // Unique identifier for the transaction
  userId           String          // Reference to the user who made the transaction
  transactionId    String          // Unique ID for the transaction (could be from payment gateway)
  amount           Float           // The amount of money involved in the transaction
  balance          Float           // Wallet balance after the transaction
  cashbackBalance  Float?          // Cashback balance after the transaction (if applicable)
  title            String          // Description of the transaction (e.g., "Added Money", "Purchased with Wallet")
  status           TransactionStatus  @default(PENDING)  // Status of the transaction (Completed, Pending, Cancelled)
  createdAt        DateTime        @default(now())       // Date when the transaction was created
  updatedAt        DateTime        @updatedAt()          // Date when the transaction was last updated
}

// Enum to represent transaction status
enum TransactionStatus {
  COMPLETED
  PENDING
  CANCELLED
}

// Order model
model Order {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  transactionId  String
  totalAmount    Float
  gstAmount      Float         // GST amount
  status         OrderStatus   @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  orderItems     OrderItem[]   // Relation to OrderItem

  billingAddress   Address?      @relation("BillingAddress", fields: [billingAddressId], references: [id], onDelete: SetNull) 
  billingAddressId String?       // Optional field
  shippingAddress  Address?      @relation("ShippingAddress", fields: [shippingAddressId], references: [id], onDelete: SetNull)
  shippingAddressId String?      // Optional field
}




// Enum for order status
enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

// OrderItem model
model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float    // Price for this particular product at the time of purchase

  @@map("order_items")
}

// CartStatus enum
enum CartStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  DIRECT
}

model Wishlist {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id]) // Relation to User
  userId    String        // Foreign key to User
  items     WishlistItem[]  // One-to-many relation to WishlistItem

  @@map("wishlists")
}

model WishlistItem {
  id         String     @id @default(cuid())
  addedAt    DateTime   @default(now())
  wishlist   Wishlist   @relation(fields: [wishlistId], references: [id]) // Relation to Wishlist
  wishlistId String     // Foreign key to Wishlist
  product    Product    @relation(fields: [productId], references: [id])  // Relation to Product
  productId  String     // Foreign key to Product

  @@map("wishlist_items")
}

// Address model
model Address {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  address1    String
  address2    String?
  country     String
  state       String
  pincode     String
  mobile      String
  addressName String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  billingOrder    Order[]  @relation("BillingAddress")
  shippingOrder   Order[]  @relation("ShippingAddress")

  @@map("addresses")
}